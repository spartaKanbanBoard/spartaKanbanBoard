package com.sparta.spartakanbanboard.domain.card.service;import com.sparta.spartakanbanboard.domain.card.dto.CardResponseDto;import com.sparta.spartakanbanboard.domain.card.dto.CreateCardRequestDto;import com.sparta.spartakanbanboard.domain.card.entity.Card;import com.sparta.spartakanbanboard.domain.card.repository.CardRepository;import com.sparta.spartakanbanboard.domain.column.entity.KanbanColumn;import com.sparta.spartakanbanboard.domain.column.service.ColumnService;import com.sparta.spartakanbanboard.domain.user.entity.User;import com.sparta.spartakanbanboard.domain.user.service.UserService;import com.sparta.spartakanbanboard.domain.user.service.global.dto.CommonResponseDto;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;@Service@RequiredArgsConstructorpublic class CardServiceImpl implements CardService {    private final CardRepository cardRepository;    private final UserService userService;    private final ColumnService columnService;    @Override    public CommonResponseDto<Object> createCard(Long kanbanColumnId, CreateCardRequestDto requestDto) {        User user = null;        if(requestDto.getUserId() != null) {            user = userService.findByUserId(requestDto.getUserId());        }        KanbanColumn kanbanColumn = columnService.findbyId(kanbanColumnId);        Card card = Card.of(requestDto, user, kanbanColumn);        cardRepository.save(card);        CardResponseDto cardResponseDto = new CardResponseDto(card);        // KanbanColumnResponseDto kanbanColumnResponseDto = new KanbanColumnResponseDto(kanbanColumn);        return CommonResponseDto.builder()            .msg("카드 생성이 완료되었습니다.")            // 해당 컬럼 보여주기            //.data(kananColumnResponseDto)            .data(cardResponseDto)            .build();    }//    public CommonResponseDto<List<CardResponseDto>> getAllCard(UserDetailsImpl userDetails) {////        List<Card> cardList = cardRepository.findAllByUserId(userDetails.getUser().getId()).stream().toList();////        List<CardResponseDto> cardResponseDtoList = cardList.stream()//            .map(CardResponseDto::new)//            .toList();//    }}