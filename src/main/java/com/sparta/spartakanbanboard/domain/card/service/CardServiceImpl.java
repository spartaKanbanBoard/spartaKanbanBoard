package com.sparta.spartakanbanboard.domain.card.service;import com.sparta.spartakanbanboard.domain.card.dto.CardResponseDto;import com.sparta.spartakanbanboard.domain.card.dto.CreateCardRequestDto;import com.sparta.spartakanbanboard.domain.card.entity.Card;import com.sparta.spartakanbanboard.domain.card.entity.State;import com.sparta.spartakanbanboard.domain.card.repository.CardRepository;import com.sparta.spartakanbanboard.domain.column.entity.KanbanColumn;import com.sparta.spartakanbanboard.domain.column.repository.ColumnRepository;import com.sparta.spartakanbanboard.domain.column.service.ColumnService;import com.sparta.spartakanbanboard.domain.user.entity.User;import com.sparta.spartakanbanboard.domain.user.service.UserService;import com.sparta.spartakanbanboard.domain.user.service.global.dto.CommonResponseDto;import java.util.List;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.PostMapping;@Service@RequiredArgsConstructorpublic class CardServiceImpl implements CardService {    private final CardRepository cardRepository;    private final UserService userService;    private final ColumnService columnService;    private final ColumnRepository columnRepository;    @Override    public CommonResponseDto<?> createCardAtKanbanColumn(Long kanbanColumnId, CreateCardRequestDto requestDto) {        User user = null;        if(requestDto.getWriterId() != null) {            user = userService.findByUserId(requestDto.getWriterId());        }        KanbanColumn kanbanColumn = columnService.findbyId(kanbanColumnId);        Card card = Card.of(requestDto, user, kanbanColumn);        cardRepository.save(card);        CardResponseDto cardResponseDto = CardResponseDto.of(card);        // KanbanColumnResponseDto kanbanColumnResponseDto = new KanbanColumnResponseDto(kanbanColumn);        return CommonResponseDto.builder()            .msg("카드 생성이 완료되었습니다.")            // 해당 컬럼 보여주기            //.data(kananColumnResponseDto)            .data(cardResponseDto)            .build();    }    @Override    public CommonResponseDto<?> findKanbanColumnIdAllCards(Long kanbanColumnId, Long writerId, State state) {        // KanbanColumn kanbanColumn = columnService.findbyId(kanbanColumnId);        // KanbanColumnResponseDto kanbanColumnResponseDto = new KanbanColumnResponseDto(kanbanColumn);        List<Card> cardList;        if (writerId != null) {            cardList = cardRepository.findAllByKanbanColumnIdAndWriterId(kanbanColumnId, writerId);        } else if (state != null) {            cardList = cardRepository.findAllByKanbanColumnIdAndState(kanbanColumnId, state);        } else {            cardList = cardRepository.findAllByKanbanColumnId(kanbanColumnId);        }        List<CardResponseDto> cardResponseDtoList = cardList.stream()            .map(CardResponseDto::new)            .toList();        return CommonResponseDto.builder()            .msg("해당 컬럼의 전체 카드를 조회합니다.")            // 해당 컬럼 보여주기            //.data(kananColumnResponseDto)            .data(cardResponseDtoList)            .build();    }}